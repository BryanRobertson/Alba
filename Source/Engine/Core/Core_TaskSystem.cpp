#include "Core_Precompile.hpp"
#include "Core_TaskSystem.hpp"
#include "Core_TaskPool.hpp"

namespace Alba
{
	namespace Core
	{
		TaskSystem theTaskSystem;

		namespace Detail
		{
			thread_local TaskThreadId theLocalThreadId;
		}

		//-----------------------------------------------------------------------------------------
		//-----------------------------------------------------------------------------------------
		/*static*/ TaskSystem& TaskSystem::GetMutable()
		{
			return theTaskSystem;
		}

		//-----------------------------------------------------------------------------------------
		//-----------------------------------------------------------------------------------------
		/*static*/ void TaskSystem::Initialise(uint aThreadCount)
		{
			// Set main thread id
			Detail::theLocalThreadId = theMainThreadId;

			theTaskSystem.InitialiseInternal(aThreadCount);
		}

		//-----------------------------------------------------------------------------------------
		//-----------------------------------------------------------------------------------------
		/*static*/ void TaskSystem::Shutdown()
		{
			theTaskSystem.ShutdownInternal();
		}

		//-----------------------------------------------------------------------------------------
		//-----------------------------------------------------------------------------------------
		/*static*/ void TaskSystem::QueueTask(Task& /*aTask*/)
		{

		}

		//-----------------------------------------------------------------------------------------
		//-----------------------------------------------------------------------------------------
		/*static*/ TaskPool& TaskSystem::GetCurrentThreadPool()
		{
			const TaskThreadId threadId = GetCurrentThreadId();
			ALBA_ASSERT(threadId.IsValid());

			return GetMutable().myTaskPools[threadId.GetValue()];
		}

		//-----------------------------------------------------------------------------------------
		//-----------------------------------------------------------------------------------------
		/*static*/ TaskThreadId	TaskSystem::GetCurrentThreadId()
		{
			return Detail::theLocalThreadId;
		}

		//-----------------------------------------------------------------------------------------
		//-----------------------------------------------------------------------------------------
		TaskSystem::TaskSystem()
		{

		}

		//-----------------------------------------------------------------------------------------
		//-----------------------------------------------------------------------------------------
		TaskSystem::~TaskSystem()
		{

		}

		//-----------------------------------------------------------------------------------------
		//-----------------------------------------------------------------------------------------
		void TaskSystem::InitialiseInternal(uint /*aThreadCount*/)
		{

		}

		//-----------------------------------------------------------------------------------------
		//-----------------------------------------------------------------------------------------
		void TaskSystem::ShutdownInternal()
		{

		}

		//-----------------------------------------------------------------------------------------
		//-----------------------------------------------------------------------------------------
		void TaskSystem::BeginFrame()
		{
			
		}

		//-----------------------------------------------------------------------------------------
		//-----------------------------------------------------------------------------------------
		void TaskSystem::EndFrame()
		{
			
		}
	}
}